use std::io::Write;

trait Interpreter {
    fn run(&mut self);
}

struct Context<'a> {
    ip: usize,
    input: &'a mut std::io::BufRead,
}

impl<'a> Context<'a> {
    pub fn default(input: &'a mut std::io::BufRead) -> Self {
        Context {
            ip: 0,
            input: input,
        }
    }
}

impl Interpreter for (&mut Vec<i32>, &mut Context<'_>) {
    fn run(&mut self) {
        let (data, context) = self;
        let mut finished = false;

        while context.ip < data.len() {
            let opcode = data[context.ip] % 100;
            let mut modes = vec![false; 0];
            let mut modenum = data[context.ip] / 100;
            // println!("opcode {}", opcode);

            while (modenum != 0) {
                modes.push(modenum % 10 == 1);
                modenum /= 10;
            }
            // if !modes.is_empty() {
            //     println!("modes {:?}", modes);
            // }
            if modes.len() < 3 {
                modes.resize(3, false);
            }
            match opcode {
                1 | 2 | 7 | 8 => {
                    let a = if !modes[0] {
                        &data[data[context.ip + 1] as usize]
                    } else {
                        &data[context.ip + 1]
                    };
                    let b = if !modes[1] {
                        &data[data[context.ip + 2] as usize]
                    } else {
                        &data[context.ip + 2]
                    };
                    if modes[2] {
                        panic!("bad output mode 1");
                    }
                    let c = data[context.ip + 3] as usize;
                    match opcode {
                        1 => data[c] = *a + *b,
                        2 => data[c] = *a * *b,
                        7 => data[c] = (*a < *b).into(),
                        8 => data[c] = (*a == *b).into(),

                        _ => panic!("bad opcode {}", opcode),
                    }
                    context.ip += 4;
                }
                3 => {
                    print!("input: ");
                    std::io::stdout().lock().flush();
                    let mut input: String = "".into();
                    context.input.read_line(&mut input);
                    let input = input.trim().parse::<i32>().unwrap();
                    let c = data[context.ip + 1] as usize;
                    data[c] = input;
                    context.ip += 2;
                }
                4 => {
                    let a = if !modes[0] {
                        &data[data[context.ip + 1] as usize]
                    } else {
                        &data[context.ip + 1]
                    };
                    println!("output: {}", *a);
                    context.ip += 2;
                }
                5 | 6 => {
                    let a = if !modes[0] {
                        &data[data[context.ip + 1] as usize]
                    } else {
                        &data[context.ip + 1]
                    };
                    let b = if !modes[1] {
                        &data[data[context.ip + 2] as usize]
                    } else {
                        &data[context.ip + 2]
                    };
                    let do_jump = match opcode {
                        5 => *a != 0,
                        6 => *a == 0,
                        _ => panic!("bad opcode {}", opcode),
                    };
                    if do_jump {
                        context.ip = *b as usize;
                    // println!("jump to {}", context.ip);
                    } else {
                        context.ip += 3;
                    }
                }
                99 => {
                    finished = true;
                    break;
                }
                _ => panic!("bad opcode {}", opcode),
            }
        }
        println!("finished: {}", finished);
    }
}

fn main() {
    let stdin = std::io::stdin();

    if true {
        let data = vec![
            1, 12, 2, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 10, 19, 2, 9, 19, 23, 2, 23, 10,
            27, 1, 6, 27, 31, 1, 31, 6, 35, 2, 35, 10, 39, 1, 39, 5, 43, 2, 6, 43, 47, 2, 47, 10,
            51, 1, 51, 6, 55, 1, 55, 6, 59, 1, 9, 59, 63, 1, 63, 9, 67, 1, 67, 6, 71, 2, 71, 13,
            75, 1, 75, 5, 79, 1, 79, 9, 83, 2, 6, 83, 87, 1, 87, 5, 91, 2, 6, 91, 95, 1, 95, 9, 99,
            2, 6, 99, 103, 1, 5, 103, 107, 1, 6, 107, 111, 1, 111, 10, 115, 2, 115, 13, 119, 1,
            119, 6, 123, 1, 123, 2, 127, 1, 127, 5, 0, 99, 2, 14, 0, 0,
        ];
        {
            let mut data = data.clone();
            let mut input = stdin.lock();
            let mut context = Context::default(&mut input);
            (&mut data, &mut context).run();
            println!("data[0] = {}", data[0]);
        }
        for i in 0..99 {
            for j in 0..99 {
                let mut input = stdin.lock();

                let mut context = Context::default(&mut input);
                let mut data = data.clone();
                data[1] = i;
                data[2] = j;
                (&mut data, &mut context).run();
                if data[0] == 19690720 {
                    println!("answer 2: {}", 100 * i + j);
                }
            }
        }
    }
    // let mut data = vec![3, 2, 1002, 6, 3, 6, 33];
    let data = data2();

    for i in 0..2 {
        let mut input = stdin.lock();
        let mut context = Context::default(&mut input);
        (&mut data.clone(), &mut context).run();
        println!("data: {:?}", data);
    }
}

fn data2() -> Vec<i32> {
    vec![
        3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 31, 68, 225, 1001, 13, 87, 224,
        1001, 224, -118, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 7, 224, 1, 223, 224, 223, 1,
        174, 110, 224, 1001, 224, -46, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 223,
        224, 223, 1101, 13, 60, 224, 101, -73, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224,
        224, 1, 224, 223, 223, 1101, 87, 72, 225, 101, 47, 84, 224, 101, -119, 224, 224, 4, 224,
        1002, 223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1101, 76, 31, 225, 1102, 60, 43,
        225, 1102, 45, 31, 225, 1102, 63, 9, 225, 2, 170, 122, 224, 1001, 224, -486, 224, 4, 224,
        102, 8, 223, 223, 101, 2, 224, 224, 1, 223, 224, 223, 1102, 29, 17, 224, 101, -493, 224,
        224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 223, 224, 223, 1102, 52, 54, 225, 1102,
        27, 15, 225, 102, 26, 113, 224, 1001, 224, -1560, 224, 4, 224, 102, 8, 223, 223, 101, 7,
        224, 224, 1, 223, 224, 223, 1002, 117, 81, 224, 101, -3645, 224, 224, 4, 224, 1002, 223, 8,
        223, 101, 6, 224, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256,
        1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227,
        274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105,
        1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106,
        0, 0, 1105, 1, 99999, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 329, 1001, 223, 1,
        223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 344, 101, 1, 223, 223, 108, 677,
        226, 224, 102, 2, 223, 223, 1006, 224, 359, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2,
        223, 223, 1005, 224, 374, 101, 1, 223, 223, 1007, 226, 677, 224, 102, 2, 223, 223, 1005,
        224, 389, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 404, 1001, 223,
        1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 419, 101, 1, 223, 223, 1108,
        677, 677, 224, 1002, 223, 2, 223, 1005, 224, 434, 1001, 223, 1, 223, 1107, 226, 677, 224,
        102, 2, 223, 223, 1005, 224, 449, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223,
        1006, 224, 464, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479,
        1001, 223, 1, 223, 7, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223,
        1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 509, 101, 1, 223, 223, 107, 677, 677,
        224, 1002, 223, 2, 223, 1006, 224, 524, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223,
        2, 223, 1006, 224, 539, 101, 1, 223, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224,
        554, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223,
        223, 1008, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 8, 677, 226,
        224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 1007, 226, 226, 224, 1002, 223,
        2, 223, 1005, 224, 614, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1006,
        224, 629, 101, 1, 223, 223, 107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 1001,
        223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 659, 101, 1, 223, 223, 108,
        677, 677, 224, 1002, 223, 2, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
    ]
}
