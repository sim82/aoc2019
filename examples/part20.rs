use aoc2019::graph::*;
use aoc2019::monitoring::*;
use pathfinding::prelude::dijkstra;
use std::collections::HashMap;
use std::str::FromStr;

#[derive(Debug, Clone, Eq, PartialEq, Hash)]
enum Side {
    Inner,
    Outer,
}

impl Side {
    fn get_other(&self) -> Side {
        match self {
            Inner => Side::Outer,
            Outer => Side::Inner,
        }
    }
    fn from_point(cm: &CharMap2d, p: &Point) -> Self {
        let y_range = cm.get_y_range();
        let x_range = cm.get_x_range(p.y);
        // println!("{:?} {:?}", y_range, x_range);
        if p.y == y_range.start + 2
            || p.y == y_range.end - 3
            || p.x == x_range.start + 2
            || p.x == x_range.end - 3
        {
            Side::Outer
        } else {
            Side::Inner
        }
    }
}
#[derive(Debug, Clone)]
struct Node {
    name: String,
    nearest: Point,
    side: Side,
}

fn find_nodes(cm: &CharMap2d) -> Vec<Node> {
    let mut nodes = Vec::new();
    for y in cm.get_y_range() {
        for x in cm.get_x_range(y) {
            let p = Point::new(x, y);
            if cm.get_point(&p) == '.' {
                let neighbors: Vec<(Dir, char)> =
                    cm.get_neighbors(&p, |n| n.is_uppercase()).collect();
                if neighbors.is_empty() {
                    continue;
                }
                let (dir, c1) = &neighbors[0];
                let c2 = cm.get_point(&p.move_into(dir).move_into(dir));
                let name = match dir {
                    Dir::Up | Dir::Left => format!("{}{}", c2, c1),
                    Dir::Down | Dir::Right => format!("{}{}", c1, c2),
                };
                nodes.push(Node {
                    name,
                    nearest: p,
                    side: Side::from_point(cm, &p),
                });
                println!("node: {:?}", nodes.last().unwrap());
            }
        }
    }

    nodes
}
fn build_node_graph(cm: &CharMap2d, nodes: &Vec<Node>) -> Vec<(Node, Node, usize)> {
    let point_to_node: HashMap<Point, String> = nodes
        .iter()
        .map(|node| (node.nearest, node.name.clone()))
        .collect();

    let mut adj = Vec::<(Node, Node, usize)>::new();

    for n1 in nodes {
        for n2 in nodes {
            if n1.name == n2.name {
                continue;
            }
            if let Some(path) = dijkstra(
                &n1.nearest,
                |s| {
                    cm.get_neighbors(s, |n| *n == '.')
                        .map(|(ref dir, c)| (s.move_into(dir), 1))
                        .collect::<Vec<_>>()
                },
                |s| *s == n2.nearest,
            ) {
                println!("path: {} -> {}: {}", n1.name, n2.name, path.1 + 1);
                adj.push((n1.clone(), n2.clone(), path.1 + 1));
            }
        }
    }
    adj
}

#[derive(Eq, PartialEq, Hash, Clone, Debug)]
struct State {
    name: String,
    side: Side,
    level: usize,
}

fn main() {
    // for (i, line) in data20().iter().enumerate() {
    //     println!("{} {}", i, line);
    // }

    let cm = CharMap2d::new(&data20());
    let nodes = find_nodes(&cm);
    let adj = build_node_graph(&cm, &nodes);
    {
        let start = String::from_str(&"AA").unwrap();
        let res = dijkstra(
            &start,
            |s| {
                // adj.iter()
                //     .filter_map(|a| {
                //         if a.0 == *s {
                //             Some((a.1.clone() as String, a.2 as usize))
                //         } else {
                //             None
                //         }
                //     })
                //     .collect()
                let mut succ = Vec::new();
                for (n1, n2, d) in &adj {
                    if n1.name == *s {
                        succ.push((n2.name.clone(), *d));
                    }
                }

                succ
            },
            |s| s == "ZZ",
        );

        println!("res: {:?}", res);
    }
    {
        let start = State {
            name: "AA".into(),
            side: Side::Outer,
            level: 0,
        };
        let goal = State {
            name: "ZZ".into(),
            side: Side::Outer,
            level: 0,
        };

        let mut num_steps = 0;
        let res = dijkstra(
            &start,
            |s| {
                // println!("state: {:?}", s);
                let mut succ = Vec::new();
                for (n1, n2, d) in &adj {
                    if n1.name == *s.name && n1.side == s.side {
                        if s.level == 0 && n2.side == Side::Outer && n2.name != "ZZ" {
                            continue;
                        }
                        succ.push((
                            State {
                                name: n2.name.clone(),
                                side: n2.side.clone(),
                                level: s.level,
                            },
                            *d,
                        ));
                    }
                }
                if s.name != "AA" && s.name != "ZZ" {
                    // println!("state {:?}", s);
                    // let portal = s.clone();
                    match s.side {
                        Side::Inner => succ.push((
                            State {
                                name: s.name.clone(),
                                side: Side::Outer,
                                level: s.level + 1,
                            },
                            0,
                        )),
                        Side::Outer => {
                            assert!(s.level != 0);
                            succ.push((
                                State {
                                    name: s.name.clone(),
                                    side: Side::Inner,
                                    level: s.level - 1,
                                },
                                0,
                            ))
                        }
                    }
                }
                // println!("succ: {:?}", succ);
                num_steps += succ.len();
                succ
            },
            |s| *s == goal,
        );
        println!("steps: {}", num_steps);
        println!("res: {:?}", res);
    }
}

fn data20() -> Vec<&'static str> {
    if !true {
        // vec![
        //     "                   A               ",
        //     "                   A               ",
        //     "  #################.#############  ",
        //     "  #.#...#...................#.#.#  ",
        //     "  #.#.#.###.###.###.#########.#.#  ",
        //     "  #.#.#.......#...#.....#.#.#...#  ",
        //     "  #.#########.###.#####.#.#.###.#  ",
        //     "  #.............#.#.....#.......#  ",
        //     "  ###.###########.###.#####.#.#.#  ",
        //     "  #.....#        A   C    #.#.#.#  ",
        //     "  #######        S   P    #####.#  ",
        //     "  #.#...#                 #......VT",
        //     "  #.#.#.#                 #.#####  ",
        //     "  #...#.#               YN....#.#  ",
        //     "  #.###.#                 #####.#  ",
        //     "DI....#.#                 #.....#  ",
        //     "  #####.#                 #.###.#  ",
        //     "ZZ......#               QG....#..AS",
        //     "  ###.###                 #######  ",
        //     "JO..#.#.#                 #.....#  ",
        //     "  #.#.#.#                 ###.#.#  ",
        //     "  #...#..DI             BU....#..LF",
        //     "  #####.#                 #.#####  ",
        //     "YN......#               VT..#....QG",
        //     "  #.###.#                 #.###.#  ",
        //     "  #.#...#                 #.....#  ",
        //     "  ###.###    J L     J    #.#.###  ",
        //     "  #.....#    O F     P    #.#...#  ",
        //     "  #.###.#####.#.#####.#####.###.#  ",
        //     "  #...#.#.#...#.....#.....#.#...#  ",
        //     "  #.#####.###.###.#.#.#########.#  ",
        //     "  #...#.#.....#...#.#.#.#.....#.#  ",
        //     "  #.###.#####.###.###.#.#.#######  ",
        //     "  #.#.........#...#.............#  ",
        //     "  #########.###.###.#############  ",
        //     "           B   J   C               ",
        //     "           U   P   P               ",
        // ]
        vec![
            "             Z L X W       C                 ",
            "             Z P Q B       K                 ",
            "  ###########.#.#.#.#######.###############  ",
            "  #...#.......#.#.......#.#.......#.#.#...#  ",
            "  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  ",
            "  #.#...#.#.#...#.#.#...#...#...#.#.......#  ",
            "  #.###.#######.###.###.#.###.###.#.#######  ",
            "  #...#.......#.#...#...#.............#...#  ",
            "  #.#########.#######.#.#######.#######.###  ",
            "  #...#.#    F       R I       Z    #.#.#.#  ",
            "  #.###.#    D       E C       H    #.#.#.#  ",
            "  #.#...#                           #...#.#  ",
            "  #.###.#                           #.###.#  ",
            "  #.#....OA                       WB..#.#..ZH",
            "  #.###.#                           #.#.#.#  ",
            "CJ......#                           #.....#  ",
            "  #######                           #######  ",
            "  #.#....CK                         #......IC",
            "  #.###.#                           #.###.#  ",
            "  #.....#                           #...#.#  ",
            "  ###.###                           #.#.#.#  ",
            "XF....#.#                         RF..#.#.#  ",
            "  #####.#                           #######  ",
            "  #......CJ                       NM..#...#  ",
            "  ###.#.#                           #.###.#  ",
            "RE....#.#                           #......RF",
            "  ###.###        X   X       L      #.#.#.#  ",
            "  #.....#        F   Q       P      #.#.#.#  ",
            "  ###.###########.###.#######.#########.###  ",
            "  #.....#...#.....#.......#...#.....#.#...#  ",
            "  #####.#.###.#######.#######.###.###.#.#.#  ",
            "  #.......#.......#.#.#.#.#...#...#...#.#.#  ",
            "  #####.###.#####.#.#.#.#.###.###.#.###.###  ",
            "  #.......#.....#.#...#...............#...#  ",
            "  #############.#.#.###.###################  ",
            "               A O F   N                     ",
            "               A A D   M                     ",
        ]
    } else {
        vec![
"                                       T   L           B   P       C       B Z           M                                     ",
"                                       I   P           A   P       U       N Z           S                                     ",
"  #####################################.###.###########.###.#######.#######.#.###########.###################################  ",
"  #.......#.....#...#.....#.#.#.....#.#.#.........#.......#.....#.....#.#.....#.#...#.#.....#...#.....#.#.....#.#.#...#.....#  ",
"  ###.#######.#.###.#.#.###.#.#.#####.#.#########.#.#.#.#####.#####.###.###.###.#.###.#.#####.###.#####.###.###.#.#.###.#.###  ",
"  #.#.#.#...#.#...#...#...#.#.#.#.........#...#...#.#.#.....#.#.#.........#.........#.#.......#.....#...#...#.#.......#.#...#  ",
"  #.#.#.#.#######.#######.#.#.#.#######.###.###.###.###.#.###.#.#.###.#########.#.###.###.###.#.#####.###.###.#.#########.###  ",
"  #.......#.#...#...#.......#.......#.....#...#...#.#.#.#.#.....#.#.....#.#.#...#...#...#...#.........#...#.......#.#...#...#  ",
"  #####.###.###.#.#########.#.#.#######.###.#.#.#.#.#.#####.#.#.###.#####.#.#.#######.#.#.#####.###.#####.#.###.#.#.###.#.#.#  ",
"  #...#...#.#...........#.#.#.#...#.#.....#.#.#.#.#.......#.#.#...#.........#...#.#...#.....#.....#.#.#.......#.#.#.#.....#.#  ",
"  #.#.#.###.###.###.###.#.#.###.###.#####.#.#.###.#.#############.#######.#####.#.#.#######.#####.###.#.#.###.#####.###.#.###  ",
"  #.#...#.#.#...#...#.....................#.#...#.#.#.#...........#...........#...#.......#.#...#.#.#...#.#.....#.#.#...#...#  ",
"  ###.#.#.#.###.###.#######.#.#.#######.###.###.#.#.#.#####.#.#.###.###.#.#######.#.###.#.#####.###.#.#######.###.#.###.###.#  ",
"  #.#.#.#...#.#.#.#.#.#.#.#.#.#.....#...#.....#...#...#.#...#.#.#.#.#.#.#...#.#...#...#.#...#.#.#.....#.#...#...#.#.#.#...#.#  ",
"  #.#.###.###.###.###.#.#.#.###.#######.###.#.#####.###.###.#.###.#.#.###.###.###.#.#####.###.#.#.#####.#.#######.#.#.#.#####  ",
"  #...#...#...#...#...#.......#.#.#...#...#.#.....#.#.#.....#.#.#.......#...#.....#.....#.............#.....#...#...#.#...#.#  ",
"  ###.###.###.###.###.#.###.#####.###.#.#######.#.#.#.#####.###.###.#####.###.###.#.#####.#####.#######.#######.#.###.###.#.#  ",
"  #...#.....#...#.......#...#.#.#...#.........#.#.#.#...#.......#...#.#.....#...#.#.#.......#.....#...#.........#...#...#...#  ",
"  ###.###.###.#####.###.#.#.#.#.#.###.#.#.#######.#.#.#####.#.#####.#.#######.###.#####.#.###.###.#.###.#########.###.#####.#  ",
"  #.#.#.#...#...#.#...#.#.#.#.....#.#.#.#.#...#.#.#.......#.#.#...........#...#.....#...#.#.....#.........#.....#.#.........#  ",
"  #.#.#.###.#.###.###############.#.###.#####.#.#.#.###.#####.#######.###########.#.#####.#######.#.###.#.###.###.###.#######  ",
"  #.#.#.#.......#...#.....#.#...#.......#.........#.#.#.#.....#...#...#.......#...#.#.#.........#.#.#...#.#.#.#.#.#.........#  ",
"  #.#.#.###.#.#####.###.###.###.#.#####.###.#######.#.###.#.#####.#.#####.#######.###.#.###########.#.#.###.#.#.#.###.#######  ",
"  #.........#.#.......#.#.#.......#.......#.....#.#.....#.#.#.#...........#.........#.............#.#.#.#.#.......#.....#.#.#  ",
"  #####.###.#######.###.#.#######.#.#.#.###.###.#.###.#####.#.#.#####.#.#########.#######.#.#####.#######.###.###.#.#####.#.#  ",
"  #...#.#.....#.#.....#.#...#...#.#.#.#...#.#.#...#.......#.#.#.#.....#.#.#...#...#.....#.#.....#...#.....#.#.#...#.....#.#.#  ",
"  ###.#.#######.###.#.#.#.###.###########.###.###.#.#.#####.#.###.#.#####.###.###.#.#.###.#############.###.#####.#####.#.#.#  ",
"  #...#...#.#...#...#.#.....#...........#.#.#.....#.#...#.....#...#.....#.........#.#...#.#.#.....#.#.....#.....#.........#.#  ",
"  ###.#.###.###.#.#####.#####.###.#####.#.#.#####.#.#######.#########.#######.#.###.###.#.#.#.#####.#####.###.###.#####.###.#  ",
"  #...#...#.#...#...#.#...#...#.....#...#...#...#.#.#.....#...#.#.#.........#.#.#...#.#.............#...........#.....#.#...#  ",
"  ###.#.###.###.#.###.#.###############.#.###.###.#.#.###.#.###.#.#.###.#######.###.#.###.#.#.#############.#####.###.###.###  ",
"  #...#.....#.....#.....#...#.#.......#...#.#...#.#...#.#.#.#...#.....#.#...#.....#.....#.#.#.#.#.#.#.#.....#.......#.#.....#  ",
"  #.#####.###.#.#######.#.###.#######.###.#.#.#.#.#.###.#.#.###.#####.#####.###.#.###.###.#####.#.#.#.###.#.#####.#######.#.#  ",
"  #.....#...#.#...#.#.#...#...#.....#.....#...#...#.#.....#.....#.....#.........#.#.....#...#.....#...#...#.#.#...#.#.....#.#  ",
"  ###.#.#.###.#####.#.#.#.#.#####.#####.#####.#######.#########.###.#########.#########.#####.#.#####.#####.#.###.#.#####.###  ",
"  #.#.#...#.#...#.#...#.#.#.#.#...#    F     I       C         B   B         J         K    #.#.#...#.....#...#...#...#.....#  ",
"  #.#####.#.#.###.###.###.#.#.###.#    X     O       U         A   N         J         N    ###.#.#####.###.#####.###.###.###  ",
"  #.........................#.....#                                                         #.....#.........#.......#.....#.#  ",
"  #.#.#.#####.#############.#.###.#                                                         ###.#.#.###.###.#.#####.#.#.###.#  ",
"  #.#.#.....#.#.#...#...#...#...#.#                                                         #...#.....#.#.....#.....#.#.#....QD",
"  #.#.#.#######.###.#.#.#.###.#.#.#                                                         ###.#####.#######.#####.#.#.###.#  ",
"MX..#.#...#.#.....#...#...#...#.#..PP                                                     TI..#.....#.#...#...#.#.....#...#.#  ",
"  #####.###.###.###.#.#########.#.#                                                         #.###.###.#.#.#####.#########.#.#  ",
"  #...#...#...#.#.#.#...........#.#                                                         #.....#.#.#.#.#...#...#.#...#...#  ",
"  #.#######.###.#.#################                                                         #######.###.#####.#.###.#.#######  ",
"  #.......#...................#.#.#                                                       QD..........#...................#..HM",
"  #.#.###.#.#.#.#######.#.###.#.#.#                                                         #.###.###.#.#.#.###########.###.#  ",
"  #.#...#...#.#.#...#...#...#.....#                                                         #...#...#...#.#.#...#.....#...#.#  ",
"  #####.#.#.###.#.#.#######.###.#.#                                                         #.###.#####.#######.#.#.###.###.#  ",
"  #.....#.#...#...#.#.#...#.#...#.#                                                       LP..#...#...#.#.........#.....#....OL",
"  #.#.###.###########.#.#######.###                                                         #########.#####.###.#########.#.#  ",
"HG..#.#...#.#...#.#...#...#...#....DY                                                       #...#.........#.#.............#.#  ",
"  #.#######.###.#.#.###.###.#######                                                         #.#####.#.#.#####################  ",
"  #.#.....................#...#...#                                                         #.....#.#.#.....#...#.....#......FG",
"  ###.#######.#.#.#.#.#.#.#.#.#.#.#                                                         #####.###.#########.#.#.###.#.###  ",
"  #...#.....#.#.#.#.#.#.#...#...#.#                                                         #.....#.#...#.#.#.#...#...#.#...#  ",
"  ###.###.#.#####.###.#####.#####.#                                                         #####.#.#.###.#.#.#.#####.#.#.###  ",
"  #.......#...#.....#...#.....#.#.#                                                       QQ....................#.#.#...#...#  ",
"  #########.#.#.#.###.###.#.#.#.#.#                                                         #####.###############.#.#.#####.#  ",
"AJ..........#.#.#...#.#...#.#.#....OL                                                     WP..#...#.................#.#.#.#.#  ",
"  ###############.#########.###.#.#                                                         #.#######.###.#.###.###.###.#.###  ",
"LQ..#.........#.........#.#.#.#.#.#                                                         #.....#.....#.#...#...#.....#....FN",
"  #.#.#.#################.###.#####                                                         #.#.#####.#.###.###########.###.#  ",
"  #...#.....#.......#.#.#.#.#.....#                                                         #.#.#.....#.#...#...#.#.#...#...#  ",
"  #.#.#.#.#.###.#.###.#.#.#.#####.#                                                         ###.#.#####.###.###.#.#.#.###.#.#  ",
"  #.#.#.#.#.#.#.#...#.#.....#.#.#..HM                                                       #.#...#.#.#.#.#.#...#.#.#.....#.#  ",
"  ###.#.###.#.#.#####.#####.#.#.#.#                                                         #.#####.#.###.#####.#.#.#########  ",
"  #.#.#.#.#.......................#                                                       AJ..#.......................#.....#  ",
"  #.#####.#######################.#                                                         #.#.###.#.#.###.###.#####.#.###.#  ",
"QQ......................#.......#.#                                                         #.....#.#.#.#.....#.#.......#...#  ",
"  #.#####.###.#####.#.###.#####.###                                                         #.#####.#.#######.#######.###.###  ",
"  #.#.#.#.#.....#...#...#.#.....#..IC                                                       #.#...#.#.....#...#.....#.#.#.#.#  ",
"  #.#.#.#.#.#########.###.#.#####.#                                                         ###.#############.#.#.#####.#.#.#  ",
"  #.#.#.#.#.#.............#.....#.#                                                         #...#.#.....#...#.#.#.......#....DY",
"  ###.#.###########.###########.#.#                                                         #.###.#.#####.#########.#########  ",
"  #.#.....#.#.#.#.#.#.#...#...#...#                                                       MX....#.......#.................#..IO",
"  #.###.###.#.#.#.###.###.###.###.#                                                         ###.#.#####.#.###.#.###.#.#.#.#.#  ",
"RW..#.....#...................#...#                                                         #...#...#.#...#...#.#...#.#.#.#.#  ",
"  #.#.#.#.###.###.#####.#.#.#######                                                         #.###.###.#.###.#####.#.#####.#.#  ",
"  #.#.#.#.....#.......#.#.#...#....LQ                                                       #...#.#.#.....#.....#.#.#.......#  ",
"  #.#.#####.#.#####.#####.#.#.###.#                                                         ###.#.#.#######.###########.###.#  ",
"  #.......#.#.#.#.......#.#.#.#...#                                                         #...........#...#.......#...#...#  ",
"  #.#.#######.#.###.#.###.###.###.#                                                         ###.#.#####.###.#.#######.#####.#  ",
"  #.#.....#...#.#...#.#...#.......#                                                         #...#.....#.#.....#...#...#.....#  ",
"  ###.#####.#.#.###.#####.###.###.#    F         H       U       I     R     F         M    #.#######.#.###.#.#.###########.#  ",
"  #...#...#.#.#.........#.#.....#.#    G         G       S       F     W     N         S    #.....#.#.#.#.#.#.......#.......#  ",
"  ###.#.#####.###.###.###.#.#####.#####.#########.#######.#######.#####.#####.#########.#######.###.###.#.#.#####.#.#######.#  ",
"  #.........#...#.#...#.#.#.#.#...#.......#.......#.#.#.....#.....#.........#.#.............#...#.......#...#.#...#.#.......#  ",
"  #.###.#############.#.###.#.#.#.###.###.#####.###.#.#.#####.###########.###.###.###############.#.#####.#.#.###.#####.###.#  ",
"  #.#...#.......#.........#.#...#...#...#...#.....#.....#.#.......#...#.#...#.#.#.#...........#.#.#.#.....#...#.#.#.#...#...#  ",
"  #.###.#.#####.#.#.###.#######.#####.#####.#.#.#####.#.#.###.###.###.#.#.###.#.#.#.###.#.###.#.###.###.#.###.#.###.###.###.#  ",
"  #.#.#.#.#.#.....#.#.....#.#.#...#.....#.#.#.#...#...#.#...#.#.....#.......#...#.#...#.#.#.....#.#...#.#.#.........#.....#.#  ",
"  ###.#####.###.#.#####.###.#.###.###.#.#.#####.#####.###.#########.#.#.###.#.#.#.#.###.#.###.###.#.#########.#.#.#########.#  ",
"  #.#...........#.#.......#...#...#...#.#.....#.#.#...#.#...#.......#.#...#.#.#.#...#...#...#...#.....#...#...#.#.#.#.#.#...#  ",
"  #.#.###.#.#.#.###########.#########.#######.#.#.#.#.###.#.#.###########.#####.#####.#.#.#.#############.#.#.###.#.#.#.###.#  ",
"  #...#...#.#.#.#...#...#.....#...#.....#.........#.#.#...#.#.....#.#.....#.#.......#.#.#.#.#.#.#...#.....#.#.#.......#.....#  ",
"  #.###.#####.#.###.###.###.#####.###.#####.#.###.###.#.###.#.#####.#.#.###.###.#.#####.#####.#.#.###.#####.#.###.#.###.###.#  ",
"  #.#...#.....#...#...................#...#.#...#...#.....#.#.......#.#.....#...#.#.#.#...#.#.#.........#.#.#.#...#.#...#.#.#  ",
"  #####.#####.#####.#.###.#.#.#.#.###.#.#####.#############.#.#.###.#####.#####.###.#.#.#.#.#.###.###.#.#.###.###.#####.#.###  ",
"  #.....#...#.#.....#...#.#.#.#.#...#.....#...#.#.#.........#.#.#...#.#...#.#.....#.#...#...#.#...#.#.#.#...#.#.#.....#.....#  ",
"  #.###.###.#######.#.#######.###.###.#######.#.#.###.###.#######.###.#.###.###.###.###.#####.#.###.#####.###.#.###.###.###.#  ",
"  #.#...#...#.#.....#.#.#.....#.#.#...#.#...#...#.....#.........#.....#...#.#.#.......#...........#.......#.......#...#.#...#  ",
"  #.#.#####.#.#####.###.#.###.#.#.###.#.#.###.#.#####.###.#########.###.###.#.#.#.#####.###.#########.#.#.#.###.#######.#.###  ",
"  #.#.#...............#...#.#...#.#.........#.#.....#.#.#.#.#.#.#...#.....#.#...#...#.....#...........#.#.#.#.........#.#.#.#  ",
"  #.###.#.###.#.#.#.###.#.#.###.#####.###.#.#.#######.#.###.#.#.#.#######.#.#.###.#####.#####.###.###.#.#.#####.#######.###.#  ",
"  #...#.#.#...#.#.#.#...#.#.#.#.#.....#...#.#.....#.....#.....#.......#...#...#.#.#.........#...#...#.#.#...#.........#.#.#.#  ",
"  #.#########.###.#.#######.#.#######.#####.###.#####.#.###.#.#####.#.###.#.###.#.###.###.###.###.#####.#########.###.###.#.#  ",
"  #.....#.......#.#.#.....#.#.#.#.#.#.#...#...#...#...#.#...#.#.#...#...#.#...#.#.#.#...#...#.#.....#...........#...#.......#  ",
"  #.#.#######.#####.#####.#.#.#.#.#.###.#.#.###.#####.#####.###.#.#######.###.#.###.#.#.#############.#.###.#.#.#######.#####  ",
"  #.#...#...#.#.....#.........#.........#.#...#...#.......#...#.....#.#...#.....#.#...#...........#.#.#...#.#.#.......#.....#  ",
"  #.#####.#####.#.#########.###.#.###.###.#.###.#.###.###.#.#######.#.#.###.#####.###.#.#.#.#.#.#.#.###.###.###.###.#########  ",
"  #.#...#.#.#...#.#.....#.....#.#...#.#.#.....#.#...#.#.#...#.#...#...#...#.....#.#...#.#.#.#.#.#.....#...#...#.#.....#...#.#  ",
"  #.###.#.#.###.###.#####.###.###.###.#.#########.#####.###.#.#.#.#.###.#.###.###.###.#.#####.###.#.###.###.###.#####.#.###.#  ",
"  #.#...........#.....#.#.#.#...#.#...#.....#.....#.#.#...#...#.#.....#.#.#.........#.#...#...#.#.#.#...#.....#...#.........#  ",
"  #.###.#########.#.#.#.###.#.#######.###.#.###.###.#.###.#.#####.#.#####.#####.#######.#######.#######.###.#.#.#.#.#.###.#.#  ",
"  #.#.....#.......#.#.................#...#...#.....#.......#.....#...#.....#.#.#.#.#...#.........#.......#.#.#.#.#.#.#...#.#  ",
"  #.#######.#.###.#.#.###.#.#.#.###.#.#.###.#######.#.#############.###.#####.#.#.#.###.#.#####.#.###.###.#####.#.###.#####.#  ",
"  #.#.......#.#...#.#.#...#.#.#.#...#...#...#.......#.........#.....#.........#.#.............#.#.#.....#...#...#...#...#...#  ",
"  #########################################.#.###########.#######.###.###.#####.###.#########################################  ",
"                                           I I           J       W   K   A     U   F                                           ",
"                                           F C           J       P   N   A     S   X                                           ",
        ]
    }
}
