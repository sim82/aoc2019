use pathfinding::prelude::dijkstra;
use std::collections::HashSet;

#[derive(Eq, PartialEq, Hash, Clone, Debug)]
enum StatePos {
    H(usize, usize, usize),
    V(usize, usize, usize),
    Start,
}

#[derive(PartialEq, Eq, Hash, Clone, Debug)]
struct State {
    pos: StatePos,
    keys: Vec<char>,
}

struct Graph {
    transitions: Vec<Vec<char>>,
    start_x: usize,
    start_y: usize,
    num_keys: usize,
}

fn to_lowercase_western(c: &char) -> char {
    let c = *c;
    if c as u16 >= 'A' as u16 && c as u16 <= 'Z' as u16 {
        (c as u16 + 32) as u8 as char // meeeeehh...
    } else {
        panic!("not uppercase: {}", c);
    }
}

impl Graph {
    fn new(transitions: Vec<Vec<char>>) -> Graph {
        let mut start_x = 0;
        let mut start_y = 0;
        let mut num_keys = 0;
        for (y, line) in transitions.iter().enumerate() {
            if let Some(x) = line.iter().position(|x| *x == '@') {
                println!("start: {} {}", x, y);
                start_x = x;
                start_y = y;
            }
            num_keys += line.iter().filter(|x| x.is_lowercase()).count();
        }
        println!("start: {} {}\nnum_keys: {}", start_x, start_y, num_keys);

        Graph {
            transitions,
            start_x,
            start_y,
            num_keys,
        }
    }

    fn get(&self, x: usize, y: usize) -> char {
        if y >= self.transitions.len() || x >= self.transitions[y].len() {
            panic!("out of bounds: {} {}", x, y);
        }
        self.transitions[y][x]
    }
    fn can_pass(&self, state: &State, x: usize, y: usize) -> bool {
        let field = self.get(x, y);
        match field {
            '#' => panic!("asked can_pass for wall"),
            '.' | '@' => true,
            x if x.is_uppercase() => {
                let cont = state.keys.contains(&to_lowercase_western(&field));
                // println!(
                //     "cont: {:?} {:?} {}",
                //     state.keys,
                //     to_lowercase_western(&field),
                //     cont,
                // );
                cont
            }
            x if x.is_lowercase() => true,
            _ => panic!("unhandled char: {}", field),
        }
    }
    fn pass(&self, state: &State, x: usize, y: usize, pos: StatePos) -> (State, usize) {
        let mut keys = state.keys.clone();
        let field = self.get(x, y);
        if field.is_lowercase() {
            //keys.insert(field);
            if keys.iter().find(|tk| **tk == field).is_none() {
                keys.push(field);
                keys.sort_by_key(|x| x.clone());
            }
        }
        (State { pos, keys }, 1)
    }
    fn exists(&self, x: usize, y: usize) -> bool {
        self.get(x, y) != '#'
    }
    fn successors(&self, state: &State) -> Vec<(State, usize)> {
        let mut succ = Vec::new();
        match state.pos.clone() {
            StatePos::H(y, x1, x2) => {
                if self.exists(x2 + 1, y) && self.can_pass(state, x2, y) {
                    succ.push(self.pass(state, x2, y, StatePos::H(y, x2, x2 + 1)));
                }
                if self.exists(x1 - 1, y) && self.can_pass(state, x1, y) {
                    succ.push(self.pass(state, x1, y, StatePos::H(y, x1 - 1, x1)));
                }
                if self.exists(x2, y - 1) && self.can_pass(state, x2, y) {
                    succ.push(self.pass(state, x2, y, StatePos::V(x2, y - 1, y)));
                }
                if self.exists(x2, y + 1) && self.can_pass(state, x2, y) {
                    succ.push(self.pass(state, x2, y, StatePos::V(x2, y, y + 1)));
                }
                if self.exists(x1, y - 1) && self.can_pass(state, x1, y) {
                    succ.push(self.pass(state, x1, y, StatePos::V(x1, y - 1, y)));
                }
                if self.exists(x1, y + 1) && self.can_pass(state, x1, y) {
                    succ.push(self.pass(state, x1, y, StatePos::V(x1, y, y + 1)));
                }
            }
            StatePos::V(x, y1, y2) => {
                if self.exists(x, y2 + 1) && self.can_pass(state, x, y2) {
                    succ.push(self.pass(state, x, y2, StatePos::V(x, y2, y2 + 1)));
                }
                if self.exists(x, y1 - 1) && self.can_pass(state, x, y1) {
                    succ.push(self.pass(state, x, y1, StatePos::V(x, y1 - 1, y2)));
                }
                if self.exists(x - 1, y2) && self.can_pass(state, x, y2) {
                    succ.push(self.pass(state, x, y2, StatePos::H(y2, x - 1, x)));
                }
                if self.exists(x + 1, y2) && self.can_pass(state, x, y2) {
                    succ.push(self.pass(state, x, y2, StatePos::H(y2, x, x + 1)));
                }
                if self.exists(x - 1, y1) && self.can_pass(state, x, y1) {
                    succ.push(self.pass(state, x, y1, StatePos::H(y1, x - 1, x)));
                }
                if self.exists(x + 1, y1) && self.can_pass(state, x, y1) {
                    succ.push(self.pass(state, x, y1, StatePos::H(y1, x, x + 1)));
                }
            }
            StatePos::Start => {
                if self.exists(self.start_x - 1, self.start_y) {
                    succ.push(self.pass(
                        state,
                        self.start_x,
                        self.start_y,
                        StatePos::H(self.start_y, self.start_x - 1, self.start_x),
                    ));
                }
                if self.exists(self.start_x + 1, self.start_y) {
                    succ.push(self.pass(
                        state,
                        self.start_x,
                        self.start_y,
                        StatePos::H(self.start_y, self.start_x, self.start_x + 1),
                    ));
                }
                if self.exists(self.start_x, self.start_y - 1) {
                    succ.push(self.pass(
                        state,
                        self.start_x,
                        self.start_y,
                        StatePos::V(self.start_x, self.start_y - 1, self.start_y),
                    ));
                }
                if self.exists(self.start_x, self.start_y + 1) {
                    succ.push(self.pass(
                        state,
                        self.start_x,
                        self.start_y,
                        StatePos::V(self.start_x, self.start_y, self.start_y + 1),
                    ));
                }
            }
        }
        succ
    }
}

fn main() {
    let data = data18();

    let data: Vec<Vec<char>> = data18().iter().map(|line| line.chars().collect()).collect();
    let graph = Graph::new(data);

    let init_state = State {
        pos: StatePos::Start,
        keys: Vec::new(),
    };
    let res = dijkstra(
        &init_state,
        |state| {
            println!("state: {:?}", state);
            let succ = graph.successors(state);
            println!("succ: {:?}", succ);
            succ
        },
        |state| state.keys.len() == graph.num_keys,
    );
    println!("res: {:?}", res);
}

fn data18() -> Vec<&'static str> {
    if true {
        // vec![
        //     "##################",
        //     "#@aAbB############",
        //     "##################",
        //     "##################",
        // ]
        vec![
            "########################",
            "#.fD.E.e.C.b.A.@.a.B.c.#",
            "######################.#",
            "#.d....................#",
            "########################",
        ]
    } else {
        vec![
            "#################################################################################",
            "#.....#........q..#...........#.........#.#...#.......#.#...#...#.....P...#.....#",
            "###E#.#####.#######.###G#####.#########.#.#.#.#.###.#.#.#.#.#.#.#.#######.#.#.#.#",
            "#...#.....#...#.....#.#.#i..#.#...J.....#...#.....#.#...#.#...#.#.......#...#.#.#",
            "#.#######.###.#.#####.#.#.###.#.#######.#.#########.###.#.#####.#####.#######.#.#",
            "#.......#.....#.#.....#.#...#...#.....#.#.#.....#...#...#.#...#.#...#.#.......#.#",
            "#.#####.###.###.#.#.###.###.#########.#.#.###.#.#.#.#####.#.###.#.#.#.#.#########",
            "#.....#.#.#.#...#.#...#...#.....#.....#.#...#.#.#.#t#.....#...#...#.#.#.#.......#",
            "#####.#.#.#.#.#######.###.#.###.#.###.#.###.#.###.###.#######.#####.#.#.#.#####.#",
            "#...#.#.#...#.........#...#.#.....#.#.#.#.#...#...#...#...........#.#.#.#.#...#.#",
            "#.#.#.#.###.#########.#.###.#######.#.#.#.#.###.#.#.#######.#####.#.###.#.###.#.#",
            "#.#p#.#...#...#...#...#.#.#.......#...#.#.#.#...#.#.....#...#...#.#.#...#.....#.#",
            "#.#.#.###.###.#.###.###.#.#.#####.#.###.#.#.#.#########.#.###.#.###.#.#####.###.#",
            "#.#...#...#...#...#.#...#...#.#...#.#...#...#.#.......#...#...#.....#.#...#.#...#",
            "#####.#.###.#####.#.#.###.###.#.###.#.###.###.#.###.#####.#.#########.#.#.#.#.#.#",
            "#...#.#r#...#.....#.#...#.....#.#...#...#.#.#.#.#.#.....#.#.#.......#...#...#.#.#",
            "#.#.###.#.#####.#.#.###.#####.#.#.#####.#.#.#.#.#.###.#.#.#.###.###.#.#######.#.#",
            "#.#.....#.#...#.#.#.#.#.....#.#.#...#...#...#...#...#.#.#.#...#.#...#...#.....#.#",
            "#.#######.#.#.#.#.#.#.#####.###.###.#.#####.#####.#.#.#.#.###.#.#.#####.#.#####.#",
            "#.....#.#...#...#.#.......#...#...#.#.#.#.#.#.....#.#.#.#.#.#.#.#.#.....#.#...#.#",
            "#####.#.#####.#####.#####.###Y#.#.#.#.#.#.#.###.#.#.#.###.#.#.#.###.#####.#.#.#.#",
            "#.....#.#.....#...#.#...#...#.#.#.#.#.#.#.#...#.#.#.#...#...#.#.#...#...#.#.#.#.#",
            "#.#####.#.#####.#.#.###.#.###.#.#.###.#.#.###.###.#.###.###.###.#.#####.#.###.#.#",
            "#...#.......#.#.#.....#.#.#...#.#...#...#...#..b..#.#.#.#...#...........#...#...#",
            "#.#.#######.#.#.#######.###.#######.###.#.#########.#.#.#.#####.#######.###.###.#",
            "#.#.#...#.D...#v#.....#...#.#.....#.....#.#.......#...#.#.#...#.#...#.....#...#.#",
            "#.#.#L#.#######.#.###.###.#.#.###.#.#####.#.#.#######.#.#.#.#.#.#.#.#########.#.#",
            "#.#...#.#.....#.#...#.....#.....#.#...#.#.#.#.........#...#.#.#.#.#.#.......#.#.#",
            "#.#####.#.###.#.###.#############.###.#.#.#.###############.#.###.#.#.#####.#.#.#",
            "#.#...#...#.#...#.#.........#.....#...#.#.#.#.#.......#.....#...#.#.#.#.....V.#.#",
            "#.#.#.#####.#####.#########.#.#######.#.#.#.#.#.###X#.#.#.#####.#.#.#.#########.#",
            "#...#.#...#.........#.....#.#.......#...#...#.#...#.#.#.#.#...#.#.#.#.....#.R.#.#",
            "#####.#.###.#.#####.#.#####.#.#####.#####.###.###.#.#.###.#.###.#.#.#.###.#.###.#",
            "#...#.#.....#.....#.#.....#.#.....#.....#.#.......#.#....y#.#...#.#.#.#...#.#...#",
            "#.###.#.#########.#.#####.#.#####.#####.#.###.#####.#######.#.###.#.###.###.#.###",
            "#.....#...#.......#.#.....#...#.....#.#.#...#.....#.#.....#...#...#...#.#.....#.#",
            "#.#########.#######.#.#######.#####.#.#.###.#######.#.###.#.#####.###.#.#.#####.#",
            "#.........#.#.#...#.#.......#.#...#...#.#...#.....#.#.#...#.#...#...#...#.....#.#",
            "#########.#.#.#.#.#.#####.#.#.#.#.#####.#.###.###.#.#.#.###.#.#.###.#########.#.#",
            "#...........#...#.........#.#...#.............#.....#.#.......#.....#...........#",
            "#######################################.@.#######################################",
            "#.........#.....#...#...........#.............#.......#.......#.............#...#",
            "#.#.#######.#.###.#.###.#######.###.###.###.#.#.#####.#.#.###.#####.#####.#.#.#.#",
            "#.#m#z......#.....#..o#.....#.......#...#...#...#.....#.#...#.#...#...#...#.#.#.#",
            "#.#.#.###############.#####.#########.###.#########.#######.#.#.#.#.###.###.#.#.#",
            "#.#.#.....#.........#.....#.#...#...#.#.#.........#.#.......#...#.#.#...#.#.#.#.#",
            "#.#.#####.###.###.#.#####.#.#.#.#.#.#.#.#.#######.#.###.#########.###.###.#.###.#",
            "#.#.#...#...#...#.#...#...#...#...#.#...#.....#...#.....#...#.....#...#...#...#.#",
            "#.###.#.###.###.#.###.#.###########.###.#######.#########.###.#####.###.#.###.#.#",
            "#.....#.....#...#.#...#...#.....W.#...#.#.......#.........#...#.....#...#...#...#",
            "#.###########.###.#.#####.#.#####.###.#.#.#######.###.#####.###.#.###.###.#####.#",
            "#.....#.........#.#...#...#.#.....#...#.#.#...#.....#.....#.#...#.#...#.#.....#.#",
            "#####.###########.#.###.###.#.#####.###.#.#.#.#.#####.###.#.#####.#.###.#####.#.#",
            "#...#.....#.......#.#...#...#..n#.....#x#.#.#.#.#...#...#.......#.#.#...#...#...#",
            "#.#######.#.#######.#.#.#.#####.#####.#.#.#.#.###.#.###########.#.#.#.#.#.#.#####",
            "#...........#c....#.#.#.#...#.#.#.....#.#...#.#...#...#.......#...#l..#...#.....#",
            "#.###########.###.#.#.#.###.#.#.#.#####.#####.#.#####.#.#####.#################.#",
            "#.........#.F.#.#.#.#.#...#.#.#.#.....#.#...#.#.....#.#...#.#.#.....#.#.......#.#",
            "#########.#.###.#.#.#H###.#.#.#.#.###.###.#.#.#####.#.###.#.#.###.#.#.#.#####.#.#",
            "#.......#.#.....#.#.#...#.#...#.#...#...#.#.......#.#...#.#.#...#.#...#.#...#...#",
            "#.###.###.#####.#.#####.#.###.#.###.###.#.#####.###.#.###T#.###.#.#####.###.#####",
            "#...#.........#.#...#.#.#...#.#.#...#...#...#...#...#.....#.#...#.#.....#.......#",
            "#.#############.###.#C#.#####.#.###.#.#####.#.###.#########.#####.#.#####.#######",
            "#.#........f....#.#...#.......#...#g#...#...#...#.#...............#.#...#......u#",
            "#.#K#############.#######.#######N#.###.#.#####B#.###########.###.#.#.#.#####.#.#",
            "#.#.....#.....A.#....a..#.#.U...#.#...#.#.#.....#...#.........#...#...#.....#.#.#",
            "#.#####.###.###.###.###.#.#.###.#.#.###.#.#########.#.#########.###########.###.#",
            "#.#...#..k..#.#.....#.#.#...#w..#.#.#...#...........#.#...#...#.......#.....#...#",
            "#.#.#########.#######.#.#########.#.#.#.#############.#.#.#.#.#######.#.#####.###",
            "#.#.........#.........#.#......s..#.#.#.#.#.......#...#.#...#.......#.#.#.#.....#",
            "#.#.###.###.#####.###.#S#.#########.#.###.#.#.###.#.###.###########.###.#.#.###.#",
            "#.#...#.#.#.#...#.#...#...#...#...#.#...#.#.#.#.....#...#.....#...#...#.#...#...#",
            "#.#####.#.#.#.#.#.#.#######.#.#.###.###.#.#.#.###.###.###.#.#.###.###.#.#.###.###",
            "#..e....#.#.#.#...#...#.....#.#.......#.#...#...#.#...#...#.#.......#...#...#...#",
            "#########.#.#.#######.#####.#.#.#######.#.#####.#M#.#####.#.#######.###########.#",
            "#.......I.#.#.#.......#.....#.#..j#...#.#...#...#.#.#...#.#...#...#.#...#.......#",
            "#.#########.#.#.#######.#####.#####.#.#.#####.#####Q#.#.#####.###.#.#.#.#.#####.#",
            "#.....#...#...#.......#.#...#.......#.#.#.....#.....#.#.....#...#.#.Z.#.#.O.#.#.#",
            "#.###.#.#.###########.#.#.###########.#.#.#####.#####.#####.###.#.#####.###.#.#.#",
            "#...#...#...............#...............#..d..........#.........#...........#..h#",
            "#################################################################################",
        ]
    }
}
