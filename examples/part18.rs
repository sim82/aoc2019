use aoc2019::monitoring::*;
use pathfinding::prelude::dijkstra;

#[derive(PartialEq, Eq, Hash, Clone, Debug)]
struct State {
    pos: Point,
    keys: Vec<char>,
}

struct Graph {
    transitions: Vec<Vec<char>>,
    start: Point,
    num_keys: usize,
}

fn to_lowercase_western(c: &char) -> char {
    let c = *c;
    if c as u16 >= 'A' as u16 && c as u16 <= 'Z' as u16 {
        (c as u16 + 32) as u8 as char // meeeeehh...
    } else {
        panic!("not uppercase: {}", c);
    }
}

impl Graph {
    fn new(transitions: Vec<Vec<char>>) -> Graph {
        let mut start = Point::zero();
        let mut num_keys = 0;
        for (y, line) in transitions.iter().enumerate() {
            if let Some(x) = line.iter().position(|x| *x == '@') {
                println!("start: {} {}", x, y);
                start = Point::new(x as i32, y as i32);
            }
            num_keys += line.iter().filter(|x| x.is_lowercase()).count();
        }
        println!("start: {:?}\nnum_keys: {}", start, num_keys);

        Graph {
            transitions,
            start,
            num_keys,
        }
    }

    fn get(&self, pos: Point) -> char {
        let x = pos.x as usize;
        let y = pos.y as usize;
        if y >= self.transitions.len() || x >= self.transitions[y].len() {
            panic!("out of bounds: {} {}", x, y);
        }
        self.transitions[y as usize][x as usize]
    }

    fn can_move_to(&self, state: &State, dir: Dir) -> bool {
        let pos = state.pos.move_into(&dir);
        let field = self.get(pos);
        match field {
            '#' => false,
            '.' | '@' => true,
            x if x.is_uppercase() => {
                let cont = state.keys.contains(&to_lowercase_western(&field));
                // println!(
                //     "cont: {:?} {:?} {}",
                //     state.keys,
                //     to_lowercase_western(&field),
                //     cont,
                // );
                cont
            }
            x if x.is_lowercase() => true,
            _ => panic!("unhandled char: {}", field),
        }
    }
    fn move_to(&self, state: &State, dir: Dir) -> (State, usize) {
        let mut keys = state.keys.clone();
        let pos = state.pos.move_into(&dir);
        let field = self.get(pos);
        if field.is_lowercase() {
            //keys.insert(field);
            if keys.iter().find(|tk| **tk == field).is_none() {
                keys.push(field);
                keys.sort_by_key(|x| x.clone());
            }
        }
        (State { pos, keys }, 1)
    }

    fn successors(&self, state: &State) -> Vec<(State, usize)> {
        let mut succ = Vec::new();
        if self.can_move_to(state, Dir::Up) {
            succ.push(self.move_to(state, Dir::Up))
        }
        if self.can_move_to(state, Dir::Down) {
            succ.push(self.move_to(state, Dir::Down))
        }
        if self.can_move_to(state, Dir::Left) {
            succ.push(self.move_to(state, Dir::Left))
        }
        if self.can_move_to(state, Dir::Right) {
            succ.push(self.move_to(state, Dir::Right))
        }
        succ
    }
}

fn main() {
    let data = data18();

    let data: Vec<Vec<char>> = data18().iter().map(|line| line.chars().collect()).collect();
    let graph = Graph::new(data);

    let init_state = State {
        pos: graph.start.clone(),
        keys: Vec::new(),
    };
    let res = dijkstra(
        &init_state,
        |state| {
            let succ = graph.successors(state);
            succ
        },
        |state| state.keys.len() == graph.num_keys,
    );
    println!("res: {:?}", res);
}

fn data18() -> Vec<&'static str> {
    if false {
        // vec![
        //     "##################",
        //     "#@aAbB############",
        //     "##################",
        //     "##################",
        // ]
        // vec![
        //     "########################",
        //     "#f.D.E.e.C.b.A.@.a.B.c.#",
        //     "######################.#",
        //     "#d.....................#",
        //     "########################",
        // ]
        // vec![
        //     "########################",
        //     "#...............b.C.D.f#",
        //     "#.######################",
        //     "#.....@.a.B.c.d.A.e.F.g#",
        //     "########################",
        // ]
        // vec![
        //     "#################",
        //     "#i.G..c...e..H.p#",
        //     "########.########",
        //     "#j.A..b...f..D.o#",
        //     "########@########",
        //     "#k.E..a...g..B.n#",
        //     "########.########",
        //     "#l.F..d...h..C.m#",
        //     "#################",
        // ]
        vec![
            "########################",
            "#@..............ac.GI.b#",
            "###d#e#f################",
            "###A#B#C################",
            "###g#h#i################",
            "########################",
        ]
    } else {
        vec![
            "#################################################################################",
            "#.....#........q..#...........#.........#.#...#.......#.#...#...#.....P...#.....#",
            "###E#.#####.#######.###G#####.#########.#.#.#.#.###.#.#.#.#.#.#.#.#######.#.#.#.#",
            "#...#.....#...#.....#.#.#i..#.#...J.....#...#.....#.#...#.#...#.#.......#...#.#.#",
            "#.#######.###.#.#####.#.#.###.#.#######.#.#########.###.#.#####.#####.#######.#.#",
            "#.......#.....#.#.....#.#...#...#.....#.#.#.....#...#...#.#...#.#...#.#.......#.#",
            "#.#####.###.###.#.#.###.###.#########.#.#.###.#.#.#.#####.#.###.#.#.#.#.#########",
            "#.....#.#.#.#...#.#...#...#.....#.....#.#...#.#.#.#t#.....#...#...#.#.#.#.......#",
            "#####.#.#.#.#.#######.###.#.###.#.###.#.###.#.###.###.#######.#####.#.#.#.#####.#",
            "#...#.#.#...#.........#...#.#.....#.#.#.#.#...#...#...#...........#.#.#.#.#...#.#",
            "#.#.#.#.###.#########.#.###.#######.#.#.#.#.###.#.#.#######.#####.#.###.#.###.#.#",
            "#.#p#.#...#...#...#...#.#.#.......#...#.#.#.#...#.#.....#...#...#.#.#...#.....#.#",
            "#.#.#.###.###.#.###.###.#.#.#####.#.###.#.#.#.#########.#.###.#.###.#.#####.###.#",
            "#.#...#...#...#...#.#...#...#.#...#.#...#...#.#.......#...#...#.....#.#...#.#...#",
            "#####.#.###.#####.#.#.###.###.#.###.#.###.###.#.###.#####.#.#########.#.#.#.#.#.#",
            "#...#.#r#...#.....#.#...#.....#.#...#...#.#.#.#.#.#.....#.#.#.......#...#...#.#.#",
            "#.#.###.#.#####.#.#.###.#####.#.#.#####.#.#.#.#.#.###.#.#.#.###.###.#.#######.#.#",
            "#.#.....#.#...#.#.#.#.#.....#.#.#...#...#...#...#...#.#.#.#...#.#...#...#.....#.#",
            "#.#######.#.#.#.#.#.#.#####.###.###.#.#####.#####.#.#.#.#.###.#.#.#####.#.#####.#",
            "#.....#.#...#...#.#.......#...#...#.#.#.#.#.#.....#.#.#.#.#.#.#.#.#.....#.#...#.#",
            "#####.#.#####.#####.#####.###Y#.#.#.#.#.#.#.###.#.#.#.###.#.#.#.###.#####.#.#.#.#",
            "#.....#.#.....#...#.#...#...#.#.#.#.#.#.#.#...#.#.#.#...#...#.#.#...#...#.#.#.#.#",
            "#.#####.#.#####.#.#.###.#.###.#.#.###.#.#.###.###.#.###.###.###.#.#####.#.###.#.#",
            "#...#.......#.#.#.....#.#.#...#.#...#...#...#..b..#.#.#.#...#...........#...#...#",
            "#.#.#######.#.#.#######.###.#######.###.#.#########.#.#.#.#####.#######.###.###.#",
            "#.#.#...#.D...#v#.....#...#.#.....#.....#.#.......#...#.#.#...#.#...#.....#...#.#",
            "#.#.#L#.#######.#.###.###.#.#.###.#.#####.#.#.#######.#.#.#.#.#.#.#.#########.#.#",
            "#.#...#.#.....#.#...#.....#.....#.#...#.#.#.#.........#...#.#.#.#.#.#.......#.#.#",
            "#.#####.#.###.#.###.#############.###.#.#.#.###############.#.###.#.#.#####.#.#.#",
            "#.#...#...#.#...#.#.........#.....#...#.#.#.#.#.......#.....#...#.#.#.#.....V.#.#",
            "#.#.#.#####.#####.#########.#.#######.#.#.#.#.#.###X#.#.#.#####.#.#.#.#########.#",
            "#...#.#...#.........#.....#.#.......#...#...#.#...#.#.#.#.#...#.#.#.#.....#.R.#.#",
            "#####.#.###.#.#####.#.#####.#.#####.#####.###.###.#.#.###.#.###.#.#.#.###.#.###.#",
            "#...#.#.....#.....#.#.....#.#.....#.....#.#.......#.#....y#.#...#.#.#.#...#.#...#",
            "#.###.#.#########.#.#####.#.#####.#####.#.###.#####.#######.#.###.#.###.###.#.###",
            "#.....#...#.......#.#.....#...#.....#.#.#...#.....#.#.....#...#...#...#.#.....#.#",
            "#.#########.#######.#.#######.#####.#.#.###.#######.#.###.#.#####.###.#.#.#####.#",
            "#.........#.#.#...#.#.......#.#...#...#.#...#.....#.#.#...#.#...#...#...#.....#.#",
            "#########.#.#.#.#.#.#####.#.#.#.#.#####.#.###.###.#.#.#.###.#.#.###.#########.#.#",
            "#...........#...#.........#.#...#.............#.....#.#.......#.....#...........#",
            "#######################################.@.#######################################",
            "#.........#.....#...#...........#.............#.......#.......#.............#...#",
            "#.#.#######.#.###.#.###.#######.###.###.###.#.#.#####.#.#.###.#####.#####.#.#.#.#",
            "#.#m#z......#.....#..o#.....#.......#...#...#...#.....#.#...#.#...#...#...#.#.#.#",
            "#.#.#.###############.#####.#########.###.#########.#######.#.#.#.#.###.###.#.#.#",
            "#.#.#.....#.........#.....#.#...#...#.#.#.........#.#.......#...#.#.#...#.#.#.#.#",
            "#.#.#####.###.###.#.#####.#.#.#.#.#.#.#.#.#######.#.###.#########.###.###.#.###.#",
            "#.#.#...#...#...#.#...#...#...#...#.#...#.....#...#.....#...#.....#...#...#...#.#",
            "#.###.#.###.###.#.###.#.###########.###.#######.#########.###.#####.###.#.###.#.#",
            "#.....#.....#...#.#...#...#.....W.#...#.#.......#.........#...#.....#...#...#...#",
            "#.###########.###.#.#####.#.#####.###.#.#.#######.###.#####.###.#.###.###.#####.#",
            "#.....#.........#.#...#...#.#.....#...#.#.#...#.....#.....#.#...#.#...#.#.....#.#",
            "#####.###########.#.###.###.#.#####.###.#.#.#.#.#####.###.#.#####.#.###.#####.#.#",
            "#...#.....#.......#.#...#...#..n#.....#x#.#.#.#.#...#...#.......#.#.#...#...#...#",
            "#.#######.#.#######.#.#.#.#####.#####.#.#.#.#.###.#.###########.#.#.#.#.#.#.#####",
            "#...........#c....#.#.#.#...#.#.#.....#.#...#.#...#...#.......#...#l..#...#.....#",
            "#.###########.###.#.#.#.###.#.#.#.#####.#####.#.#####.#.#####.#################.#",
            "#.........#.F.#.#.#.#.#...#.#.#.#.....#.#...#.#.....#.#...#.#.#.....#.#.......#.#",
            "#########.#.###.#.#.#H###.#.#.#.#.###.###.#.#.#####.#.###.#.#.###.#.#.#.#####.#.#",
            "#.......#.#.....#.#.#...#.#...#.#...#...#.#.......#.#...#.#.#...#.#...#.#...#...#",
            "#.###.###.#####.#.#####.#.###.#.###.###.#.#####.###.#.###T#.###.#.#####.###.#####",
            "#...#.........#.#...#.#.#...#.#.#...#...#...#...#...#.....#.#...#.#.....#.......#",
            "#.#############.###.#C#.#####.#.###.#.#####.#.###.#########.#####.#.#####.#######",
            "#.#........f....#.#...#.......#...#g#...#...#...#.#...............#.#...#......u#",
            "#.#K#############.#######.#######N#.###.#.#####B#.###########.###.#.#.#.#####.#.#",
            "#.#.....#.....A.#....a..#.#.U...#.#...#.#.#.....#...#.........#...#...#.....#.#.#",
            "#.#####.###.###.###.###.#.#.###.#.#.###.#.#########.#.#########.###########.###.#",
            "#.#...#..k..#.#.....#.#.#...#w..#.#.#...#...........#.#...#...#.......#.....#...#",
            "#.#.#########.#######.#.#########.#.#.#.#############.#.#.#.#.#######.#.#####.###",
            "#.#.........#.........#.#......s..#.#.#.#.#.......#...#.#...#.......#.#.#.#.....#",
            "#.#.###.###.#####.###.#S#.#########.#.###.#.#.###.#.###.###########.###.#.#.###.#",
            "#.#...#.#.#.#...#.#...#...#...#...#.#...#.#.#.#.....#...#.....#...#...#.#...#...#",
            "#.#####.#.#.#.#.#.#.#######.#.#.###.###.#.#.#.###.###.###.#.#.###.###.#.#.###.###",
            "#..e....#.#.#.#...#...#.....#.#.......#.#...#...#.#...#...#.#.......#...#...#...#",
            "#########.#.#.#######.#####.#.#.#######.#.#####.#M#.#####.#.#######.###########.#",
            "#.......I.#.#.#.......#.....#.#..j#...#.#...#...#.#.#...#.#...#...#.#...#.......#",
            "#.#########.#.#.#######.#####.#####.#.#.#####.#####Q#.#.#####.###.#.#.#.#.#####.#",
            "#.....#...#...#.......#.#...#.......#.#.#.....#.....#.#.....#...#.#.Z.#.#.O.#.#.#",
            "#.###.#.#.###########.#.#.###########.#.#.#####.#####.#####.###.#.#####.###.#.#.#",
            "#...#...#...............#...............#..d..........#.........#...........#..h#",
            "#################################################################################",
        ]
    }
}
