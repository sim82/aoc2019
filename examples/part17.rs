use aoc2019::intcode::*;
use aoc2019::monitoring::*;
use std::collections::HashSet;

struct Camera {
    scaffold: HashSet<Point>,
    crossing: HashSet<Point>,
    acc: String,
    cur_point: Point,
    bot_pos: Point,
    bot_dir: Dir,
}

impl Camera {
    fn new() -> Self {
        Camera {
            scaffold: HashSet::new(),
            crossing: HashSet::new(),
            acc: "".into(),
            cur_point: Point::zero(),
            bot_pos: Point::zero(),
            bot_dir: Dir::Up,
        }
    }
    fn draw(&mut self) {
        self.crossing.clear();
        for s in self.scaffold.iter() {
            if self.scaffold.contains(&(s + &Point::up()))
                && self.scaffold.contains(&(s + &Point::down()))
                && self.scaffold.contains(&(s + &Point::left()))
                && self.scaffold.contains(&(s + &Point::right()))
            {
                self.crossing.insert(s.clone());
            }
        }

        let x: Vec<_> = self.scaffold.iter().map(|pos| pos.x).collect();
        let y: Vec<_> = self.scaffold.iter().map(|pos| pos.y).collect();

        let max_x = *x.iter().max().unwrap_or(&0);
        let min_x = *x.iter().min().unwrap_or(&0);
        let max_y = *y.iter().max().unwrap_or(&0);
        let min_y = *y.iter().min().unwrap_or(&0);
        println!("");
        for y in min_y..=max_y {
            let mut line: String = "".into();
            for x in min_x..=max_x {
                let p = Point::new(x, y);
                if p == self.bot_pos {
                    line.push(self.bot_dir.to_char());
                } else if self.crossing.contains(&p) {
                    line.push('O');
                } else if self.scaffold.contains(&p) {
                    line.push('#');
                } else {
                    line.push('.');
                }
            }
            println!("{}", line);
        }
    }

    fn trace_segment(&mut self, mut pos: Point, mut dir: Dir) -> Option<(Point, Dir)> {
        dir = {
            if self.scaffold.contains(&pos.move_into(&dir.turn_left())) {
                // println!("turn left");

                dir.turn_left()
            } else if self.scaffold.contains(&pos.move_into(&dir.turn_right())) {
                // println!("turn right");

                dir.turn_right()
            } else {
                println!("end");
                return None;
            }
        };

        while self.scaffold.contains(&pos.move_into(&dir)) {
            pos = pos.move_into(&dir);
        }
        Some((pos, dir))
    }
    fn trace_segments(&mut self) {
        let mut pos = self.bot_pos.clone();
        let mut dir = self.bot_dir.clone();
        loop {
            if let Some((new_pos, new_dir)) = self.trace_segment(pos, dir) {
                println!("move {:?}", new_pos - pos);
                pos = new_pos;
                dir = new_dir;
            } else {
                break;
            }
        }
    }
}

impl Io2 for Camera {
    fn read(&mut self) -> i64 {
        0
    }
    fn write(&mut self, v: i64) {
        // println!("v: "
        match (v as u8) as char {
            '#' => {
                self.scaffold.insert(self.cur_point.clone());
                self.cur_point.x += 1;
            }
            '\n' => {
                self.cur_point.x = 0;
                self.cur_point.y += 1;
            }
            '^' | 'v' | '>' | '<' | 'X' => {
                self.scaffold.insert(self.cur_point.clone());
                self.bot_pos = self.cur_point;
                self.cur_point.x += 1;
            }
            '.' => {
                self.cur_point.x += 1;
            }
            _ => panic!("input error {}", v),
        }
        self.draw();
    }
}

fn main() {
    let mut context = Context::new(code17());
    let mut camera = Camera::new();

    (&mut context, &mut camera as &mut Io2).run();
    let calibration = camera.crossing.iter().map(|p| p.x * p.y).sum::<i32>();
    println!("calibration: {}", calibration);
    camera.trace_segments();
}

fn code17() -> Vec<i64> {
    vec![
        1, 330, 331, 332, 109, 3272, 1102, 1, 1182, 16, 1101, 0, 1427, 24, 102, 1, 0, 570, 1006,
        570, 36, 102, 1, 571, 0, 1001, 570, -1, 570, 1001, 24, 1, 24, 1106, 0, 18, 1008, 571, 0,
        571, 1001, 16, 1, 16, 1008, 16, 1427, 570, 1006, 570, 14, 21101, 58, 0, 0, 1105, 1, 786,
        1006, 332, 62, 99, 21102, 1, 333, 1, 21102, 73, 1, 0, 1106, 0, 579, 1102, 1, 0, 572, 1101,
        0, 0, 573, 3, 574, 101, 1, 573, 573, 1007, 574, 65, 570, 1005, 570, 151, 107, 67, 574, 570,
        1005, 570, 151, 1001, 574, -64, 574, 1002, 574, -1, 574, 1001, 572, 1, 572, 1007, 572, 11,
        570, 1006, 570, 165, 101, 1182, 572, 127, 1001, 574, 0, 0, 3, 574, 101, 1, 573, 573, 1008,
        574, 10, 570, 1005, 570, 189, 1008, 574, 44, 570, 1006, 570, 158, 1106, 0, 81, 21101, 340,
        0, 1, 1105, 1, 177, 21101, 0, 477, 1, 1105, 1, 177, 21102, 1, 514, 1, 21101, 176, 0, 0,
        1106, 0, 579, 99, 21102, 1, 184, 0, 1106, 0, 579, 4, 574, 104, 10, 99, 1007, 573, 22, 570,
        1006, 570, 165, 1002, 572, 1, 1182, 21102, 375, 1, 1, 21101, 211, 0, 0, 1105, 1, 579,
        21101, 1182, 11, 1, 21101, 222, 0, 0, 1106, 0, 979, 21101, 0, 388, 1, 21101, 0, 233, 0,
        1105, 1, 579, 21101, 1182, 22, 1, 21101, 0, 244, 0, 1105, 1, 979, 21102, 401, 1, 1, 21101,
        255, 0, 0, 1106, 0, 579, 21101, 1182, 33, 1, 21102, 266, 1, 0, 1105, 1, 979, 21101, 414, 0,
        1, 21101, 0, 277, 0, 1106, 0, 579, 3, 575, 1008, 575, 89, 570, 1008, 575, 121, 575, 1, 575,
        570, 575, 3, 574, 1008, 574, 10, 570, 1006, 570, 291, 104, 10, 21102, 1, 1182, 1, 21101,
        313, 0, 0, 1105, 1, 622, 1005, 575, 327, 1101, 0, 1, 575, 21102, 327, 1, 0, 1106, 0, 786,
        4, 438, 99, 0, 1, 1, 6, 77, 97, 105, 110, 58, 10, 33, 10, 69, 120, 112, 101, 99, 116, 101,
        100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 32, 98, 117, 116,
        32, 103, 111, 116, 58, 32, 0, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 65, 58, 10, 12,
        70, 117, 110, 99, 116, 105, 111, 110, 32, 66, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111,
        110, 32, 67, 58, 10, 23, 67, 111, 110, 116, 105, 110, 117, 111, 117, 115, 32, 118, 105,
        100, 101, 111, 32, 102, 101, 101, 100, 63, 10, 0, 37, 10, 69, 120, 112, 101, 99, 116, 101,
        100, 32, 82, 44, 32, 76, 44, 32, 111, 114, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32,
        98, 117, 116, 32, 103, 111, 116, 58, 32, 36, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32,
        99, 111, 109, 109, 97, 32, 111, 114, 32, 110, 101, 119, 108, 105, 110, 101, 32, 98, 117,
        116, 32, 103, 111, 116, 58, 32, 43, 10, 68, 101, 102, 105, 110, 105, 116, 105, 111, 110,
        115, 32, 109, 97, 121, 32, 98, 101, 32, 97, 116, 32, 109, 111, 115, 116, 32, 50, 48, 32,
        99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 33, 10, 94, 62, 118, 60, 0, 1, 0, -1, -1, 0,
        1, 0, 0, 0, 0, 0, 0, 1, 40, 26, 0, 109, 4, 2101, 0, -3, 586, 21001, 0, 0, -1, 22101, 1, -3,
        -3, 21102, 1, 0, -2, 2208, -2, -1, 570, 1005, 570, 617, 2201, -3, -2, 609, 4, 0, 21201, -2,
        1, -2, 1105, 1, 597, 109, -4, 2106, 0, 0, 109, 5, 1201, -4, 0, 629, 21002, 0, 1, -2, 22101,
        1, -4, -4, 21102, 0, 1, -3, 2208, -3, -2, 570, 1005, 570, 781, 2201, -4, -3, 652, 21002, 0,
        1, -1, 1208, -1, -4, 570, 1005, 570, 709, 1208, -1, -5, 570, 1005, 570, 734, 1207, -1, 0,
        570, 1005, 570, 759, 1206, -1, 774, 1001, 578, 562, 684, 1, 0, 576, 576, 1001, 578, 566,
        692, 1, 0, 577, 577, 21102, 702, 1, 0, 1105, 1, 786, 21201, -1, -1, -1, 1106, 0, 676, 1001,
        578, 1, 578, 1008, 578, 4, 570, 1006, 570, 724, 1001, 578, -4, 578, 21101, 0, 731, 0, 1106,
        0, 786, 1105, 1, 774, 1001, 578, -1, 578, 1008, 578, -1, 570, 1006, 570, 749, 1001, 578, 4,
        578, 21102, 1, 756, 0, 1105, 1, 786, 1106, 0, 774, 21202, -1, -11, 1, 22101, 1182, 1, 1,
        21101, 774, 0, 0, 1106, 0, 622, 21201, -3, 1, -3, 1105, 1, 640, 109, -5, 2105, 1, 0, 109,
        7, 1005, 575, 802, 20101, 0, 576, -6, 20102, 1, 577, -5, 1106, 0, 814, 21101, 0, 0, -1,
        21101, 0, 0, -5, 21102, 0, 1, -6, 20208, -6, 576, -2, 208, -5, 577, 570, 22002, 570, -2,
        -2, 21202, -5, 45, -3, 22201, -6, -3, -3, 22101, 1427, -3, -3, 1202, -3, 1, 843, 1005, 0,
        863, 21202, -2, 42, -4, 22101, 46, -4, -4, 1206, -2, 924, 21101, 1, 0, -1, 1105, 1, 924,
        1205, -2, 873, 21102, 35, 1, -4, 1105, 1, 924, 2102, 1, -3, 878, 1008, 0, 1, 570, 1006,
        570, 916, 1001, 374, 1, 374, 2102, 1, -3, 895, 1101, 0, 2, 0, 2102, 1, -3, 902, 1001, 438,
        0, 438, 2202, -6, -5, 570, 1, 570, 374, 570, 1, 570, 438, 438, 1001, 578, 558, 921, 21001,
        0, 0, -4, 1006, 575, 959, 204, -4, 22101, 1, -6, -6, 1208, -6, 45, 570, 1006, 570, 814,
        104, 10, 22101, 1, -5, -5, 1208, -5, 41, 570, 1006, 570, 810, 104, 10, 1206, -1, 974, 99,
        1206, -1, 974, 1101, 0, 1, 575, 21101, 973, 0, 0, 1105, 1, 786, 99, 109, -7, 2105, 1, 0,
        109, 6, 21101, 0, 0, -4, 21102, 0, 1, -3, 203, -2, 22101, 1, -3, -3, 21208, -2, 82, -1,
        1205, -1, 1030, 21208, -2, 76, -1, 1205, -1, 1037, 21207, -2, 48, -1, 1205, -1, 1124,
        22107, 57, -2, -1, 1205, -1, 1124, 21201, -2, -48, -2, 1106, 0, 1041, 21101, -4, 0, -2,
        1105, 1, 1041, 21102, -5, 1, -2, 21201, -4, 1, -4, 21207, -4, 11, -1, 1206, -1, 1138, 2201,
        -5, -4, 1059, 2102, 1, -2, 0, 203, -2, 22101, 1, -3, -3, 21207, -2, 48, -1, 1205, -1, 1107,
        22107, 57, -2, -1, 1205, -1, 1107, 21201, -2, -48, -2, 2201, -5, -4, 1090, 20102, 10, 0,
        -1, 22201, -2, -1, -2, 2201, -5, -4, 1103, 2102, 1, -2, 0, 1106, 0, 1060, 21208, -2, 10,
        -1, 1205, -1, 1162, 21208, -2, 44, -1, 1206, -1, 1131, 1106, 0, 989, 21101, 0, 439, 1,
        1106, 0, 1150, 21102, 477, 1, 1, 1105, 1, 1150, 21101, 0, 514, 1, 21101, 0, 1149, 0, 1106,
        0, 579, 99, 21101, 1157, 0, 0, 1106, 0, 579, 204, -2, 104, 10, 99, 21207, -3, 22, -1, 1206,
        -1, 1138, 1202, -5, 1, 1176, 1202, -4, 1, 0, 109, -6, 2106, 0, 0, 28, 11, 34, 1, 9, 1, 34,
        1, 9, 1, 34, 1, 9, 1, 34, 1, 9, 1, 34, 1, 9, 1, 34, 1, 5, 5, 34, 1, 5, 1, 24, 13, 1, 1, 5,
        1, 24, 1, 11, 1, 1, 1, 5, 1, 24, 1, 3, 5, 3, 1, 1, 9, 22, 1, 3, 1, 3, 1, 3, 1, 7, 1, 1, 1,
        22, 1, 3, 1, 3, 1, 3, 13, 20, 1, 3, 1, 3, 1, 11, 1, 1, 1, 1, 1, 6, 7, 5, 11, 11, 1, 1, 10,
        5, 1, 5, 1, 1, 1, 3, 1, 15, 1, 3, 1, 5, 2, 5, 1, 3, 5, 3, 1, 15, 1, 3, 1, 5, 2, 5, 1, 3, 1,
        1, 1, 5, 1, 15, 1, 3, 1, 5, 2, 5, 13, 15, 9, 1, 2, 9, 1, 1, 1, 25, 1, 3, 1, 1, 2, 9, 1, 1,
        1, 25, 1, 3, 1, 1, 2, 9, 1, 1, 1, 25, 1, 3, 1, 1, 2, 9, 1, 1, 1, 25, 5, 1, 2, 9, 1, 1, 1,
        31, 12, 1, 1, 31, 1, 12, 1, 31, 1, 12, 9, 19, 5, 20, 1, 44, 1, 44, 1, 34, 5, 5, 1, 34, 1,
        3, 1, 5, 1, 34, 1, 3, 1, 5, 1, 34, 1, 3, 1, 5, 1, 34, 1, 3, 1, 5, 1, 34, 1, 3, 1, 5, 1, 34,
        11, 38, 1, 44, 1, 44, 1, 44, 13, 18,
    ]
}
